# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm build --if-present
      - run: npm test
      
  # This workflow contains a single job called "Scan-for-secrets"
  Scan-for-secrets:
 
   # The type of runner that the job will run on
   runs-on: ubuntu-latest
 
   # Steps define the order in which the tasks will be executed
   steps:
 
     # Checks-out the repository so our job can access it
     - uses: actions/checkout@v2
    
     # Installs secret scanner on the runner
     - name: Install Whispers
       run: sudo pip install whispers
 
     # Scan repo for secrets
     - name: Run scanner for the repository
       run: whispers ${{ github.workspace }} > /tmp/scan_output.json
 
     # Upload Artifacts
     - name: Upload the scan output
       uses: actions/upload-artifact@v2
       with:
         name: scan_results
         path: /tmp/scan_output.json
         retention-days: 2

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting.
          fetch-depth: 0

      # Trigge ring SonarQube analysis as results of it are required by Quality Gate check.
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=unforgif-test
        env:
          SONAR_TOKEN: ${{ secrets.SECRET_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          args: >
            -Dsonar.projectKey=unforgif-test
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SECRET_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
